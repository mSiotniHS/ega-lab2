#+TITLE: Отчёт по лабораторной работе №2
#+SUBTITLE: Артём Абрамян, 382007-1
#+AUTHOR: Артём Абрамян
#+LANGUAGE: ru
#+OPTIONS: toc:nil author:nil date:nil timestamp:nil
#+HTML_HEAD: <style>:root{ font-family: "IBM Plex Sans"; line-height: 1.5;} pre{font-family: "Iosevka";font-size:13px;}</style>

* Блок-схема алгоритма

#+ATTR_HTML: :width 60%
[[./flowchart.png]]

* Ландшафт

#+BEGIN_src
11110 (30)
10111 (23)
01011 (11)
10000 (16)
11011 (27)
10111 (23)
10010 (18)
00001 (1)
01001 (9)
11100 (28)
10100 (20)
01110 (14)
00000 (0)
00000 (0)
10011 (19)
11000 (24)
01101 (13)
10001 (17)
10111 (23)
00100 (4)
01011 (11)
00010 (2)
01000 (8)
00100 (4)
01111 (15)
10000 (16)
00101 (5)
01011 (11)
10111 (23)
00110 (6)
11011 (27)
10100 (20)
#+END_src

* Результаты запусков

** Запуск 1

#+BEGIN_src
Итерация №1  |  Лучшая кодировка: 00111 (7)
> Оставшиеся соседи лучшей кодировки:
> 00101 (5)
> 00011 (3)
> 00110 (6)
> 10111 (23)
> 01111 (15)
>
> Отобранный кандидат: 00101 (5)
> Рассматриваемая приспособленность не лучше имеющейся, пропускаем

Итерация №2  |  Лучшая кодировка: 00111 (7)
> Оставшиеся соседи лучшей кодировки:
> 00011 (3)
> 00110 (6)
> 10111 (23)
> 01111 (15)
>
> Отобранный кандидат: 00011 (3)
> Рассматриваемая приспособленность не лучше имеющейся, пропускаем

Итерация №3  |  Лучшая кодировка: 00111 (7)
> Оставшиеся соседи лучшей кодировки:
> 00110 (6)
> 10111 (23)
> 01111 (15)
>
> Отобранный кандидат: 00110 (6)
> Рассматриваемая приспособленность не лучше имеющейся, пропускаем

Итерация №4  |  Лучшая кодировка: 00111 (7)
> Оставшиеся соседи лучшей кодировки:
> 10111 (23)
> 01111 (15)
>
> Отобранный кандидат: 10111 (23)
> (!) Рассматриваемая приспособленность лучше имеющейся, обновляем

Итерация №5  |  Лучшая кодировка: 10111 (23)
> Оставшиеся соседи лучшей кодировки:
> 10110 (22)
> 10011 (19)
> 10101 (21)
> 11111 (31)
> 00111 (7)
>
> Отобранный кандидат: 10110 (22)
> Рассматриваемая приспособленность не лучше имеющейся, пропускаем

Найденное решение: 10111 (23)
#+END_SRC

** Запуск 2

#+BEGIN_SRC
Итерация №1  |  Лучшая кодировка: 01000 (8)
> Оставшиеся соседи лучшей кодировки:
> 11000 (24)
> 01001 (9)
> 01010 (10)
> 01100 (12)
> 00000 (0)
>
> Отобранный кандидат: 11000 (24)
> (!) Рассматриваемая приспособленность лучше имеющейся, обновляем

Итерация №2  |  Лучшая кодировка: 11000 (24)
> Оставшиеся соседи лучшей кодировки:
> 10000 (16)
> 11100 (28)
> 01000 (8)
> 11010 (26)
> 11001 (25)
>
> Отобранный кандидат: 10000 (16)
> Рассматриваемая приспособленность не лучше имеющейся, пропускаем

Итерация №3  |  Лучшая кодировка: 11000 (24)
> Оставшиеся соседи лучшей кодировки:
> 11100 (28)
> 01000 (8)
> 11010 (26)
> 11001 (25)
>
> Отобранный кандидат: 11100 (28)
> (!) Рассматриваемая приспособленность лучше имеющейся, обновляем

Итерация №4  |  Лучшая кодировка: 11100 (28)
> Оставшиеся соседи лучшей кодировки:
> 11110 (30)
> 11101 (29)
> 01100 (12)
> 10100 (20)
> 11000 (24)
>
> Отобранный кандидат: 11110 (30)
> (!) Рассматриваемая приспособленность лучше имеющейся, обновляем

Итерация №5  |  Лучшая кодировка: 11110 (30)
> Оставшиеся соседи лучшей кодировки:
> 10110 (22)
> 11010 (26)
> 11100 (28)
> 11111 (31)
> 01110 (14)
>
> Отобранный кандидат: 10110 (22)
> Рассматриваемая приспособленность не лучше имеющейся, пропускаем

Найденное решение: 11110 (30)
#+END_SRC

** Запуск 3

#+BEGIN_SRC
Итерация №1  |  Лучшая кодировка: 01010 (10)
> Оставшиеся соседи лучшей кодировки:
> 01000 (8)
> 01110 (14)
> 01011 (11)
> 00010 (2)
> 11010 (26)
>
> Отобранный кандидат: 01000 (8)
> Рассматриваемая приспособленность не лучше имеющейся, пропускаем

Итерация №2  |  Лучшая кодировка: 01010 (10)
> Оставшиеся соседи лучшей кодировки:
> 01110 (14)
> 01011 (11)
> 00010 (2)
> 11010 (26)
>
> Отобранный кандидат: 01110 (14)
> (!) Рассматриваемая приспособленность лучше имеющейся, обновляем

Итерация №3  |  Лучшая кодировка: 01110 (14)
> Оставшиеся соседи лучшей кодировки:
> 11110 (30)
> 01100 (12)
> 01010 (10)
> 00110 (6)
> 01111 (15)
>
> Отобранный кандидат: 11110 (30)
> (!) Рассматриваемая приспособленность лучше имеющейся, обновляем

Итерация №4  |  Лучшая кодировка: 11110 (30)
> Оставшиеся соседи лучшей кодировки:
> 11111 (31)
> 11100 (28)
> 10110 (22)
> 11010 (26)
> 01110 (14)
>
> Отобранный кандидат: 11111 (31)
> (!) Рассматриваемая приспособленность лучше имеющейся, обновляем

Итерация №5  |  Лучшая кодировка: 11111 (31)
> Оставшиеся соседи лучшей кодировки:
> 11101 (29)
> 10111 (23)
> 11011 (27)
> 11110 (30)
> 01111 (15)
>
> Отобранный кандидат: 11101 (29)
> Рассматриваемая приспособленность не лучше имеющейся, пропускаем

Найденное решение: 11111 (31)
#+END_src

** Запуск 4

#+BEGIN_SRC
Итерация №1  |  Лучшая кодировка: 01110 (14)
> Оставшиеся соседи лучшей кодировки:
> 01111 (15)
> 01100 (12)
> 00110 (6)
> 01010 (10)
> 11110 (30)
>
> Отобранный кандидат: 01111 (15)
> (!) Рассматриваемая приспособленность лучше имеющейся, обновляем

Итерация №2  |  Лучшая кодировка: 01111 (15)
> Оставшиеся соседи лучшей кодировки:
> 01110 (14)
> 00111 (7)
> 01101 (13)
> 01011 (11)
> 11111 (31)
>
> Отобранный кандидат: 01110 (14)
> Рассматриваемая приспособленность не лучше имеющейся, пропускаем

Итерация №3  |  Лучшая кодировка: 01111 (15)
> Оставшиеся соседи лучшей кодировки:
> 00111 (7)
> 01101 (13)
> 01011 (11)
> 11111 (31)
>
> Отобранный кандидат: 00111 (7)
> Рассматриваемая приспособленность не лучше имеющейся, пропускаем

Итерация №4  |  Лучшая кодировка: 01111 (15)
> Оставшиеся соседи лучшей кодировки:
> 01101 (13)
> 01011 (11)
> 11111 (31)
>
> Отобранный кандидат: 01101 (13)
> Рассматриваемая приспособленность не лучше имеющейся, пропускаем

Итерация №5  |  Лучшая кодировка: 01111 (15)
> Оставшиеся соседи лучшей кодировки:
> 01011 (11)
> 11111 (31)
>
> Отобранный кандидат: 01011 (11)
> Рассматриваемая приспособленность не лучше имеющейся, пропускаем

Найденное решение: 01111 (15)
#+END_src

** Запуск 5

#+BEGIN_src
Итерация №1  |  Лучшая кодировка: 11100 (28)
> Оставшиеся соседи лучшей кодировки:
> 11000 (24)
> 10100 (20)
> 01100 (12)
> 11110 (30)
> 11101 (29)
>
> Отобранный кандидат: 11000 (24)
> Рассматриваемая приспособленность не лучше имеющейся, пропускаем

Итерация №2  |  Лучшая кодировка: 11100 (28)
> Оставшиеся соседи лучшей кодировки:
> 10100 (20)
> 01100 (12)
> 11110 (30)
> 11101 (29)
>
> Отобранный кандидат: 10100 (20)
> Рассматриваемая приспособленность не лучше имеющейся, пропускаем

Итерация №3  |  Лучшая кодировка: 11100 (28)
> Оставшиеся соседи лучшей кодировки:
> 01100 (12)
> 11110 (30)
> 11101 (29)
>
> Отобранный кандидат: 01100 (12)
> Рассматриваемая приспособленность не лучше имеющейся, пропускаем

Итерация №4  |  Лучшая кодировка: 11100 (28)
> Оставшиеся соседи лучшей кодировки:
> 11110 (30)
> 11101 (29)
>
> Отобранный кандидат: 11110 (30)
> (!) Рассматриваемая приспособленность лучше имеющейся, обновляем

Итерация №5  |  Лучшая кодировка: 11110 (30)
> Оставшиеся соседи лучшей кодировки:
> 11010 (26)
> 01110 (14)
> 11100 (28)
> 10110 (22)
> 11111 (31)
>
> Отобранный кандидат: 11010 (26)
> Рассматриваемая приспособленность не лучше имеющейся, пропускаем

Найденное решение: 11110 (30)
#+END_src

** Лучшие решения

| Запуск | Кодировка | Приспособленность |
|--------+-----------+-------------------|
|      1 |     10111 |                23 |
|      2 |     11110 |                30 |
|    *3* |   *11111* |              *31* |
|      4 |     01111 |                15 |
|      5 |     11110 |                30 |

Лучшее решение было получено в третьем запуске: 11111 (31).

* Выводы

Алгоритму в третьем запуске удалось найти глобальный максимум, во втором и пятом запусках
программа подобралась очень близко к нему. Однако в четвёртом запуске алгоритм нашёл совсем
неоптимальное решение, хотя
- начальная кодировка обладала бОльшим значением критерия, чем в лучшем запуске;
- одним из соседей кодировки 01111 является лучшая кодировка 11111.

Алгоритм сильно зависит от воли случая, несмотря на то, что реализует определённую
стратегию выбора следующей рассматриваемой кодировки. Соответственно, для достижения
лучшего (или приближённого к лучшему) решения, алгоритм требуется запускать несколько
раз, или стоит увеличить количество итераций в запуске.

* Исходный код

Программа написана на C# 10 (.NET 6).

** Utilities.cs

Содержит вспомогательные функции.

#+INCLUDE: "../Utilities.cs" src csharp -n

** BinaryCoding.cs

Представляет собой бинарную кодировку.

#+INCLUDE: "../BinaryCoding.cs" src csharp -n

** IFitnessCalculator.cs

Интерфейс для вычисления пригодности.

#+INCLUDE: "../IFitnessCalculator.cs" src csharp -n

** NaturalFitnessCalculator.cs

Вычисляет пригодность по десятичному представлению.

#+INCLUDE: "../NaturalFitnessCalculator.cs" src csharp -n

** SearchDomain.cs

Задаёт ландшафт поиска.

#+INCLUDE: "../SearchDomain.cs" src csharp -n

** Neighbourhood.cs

Определяет соседние кодировки.

#+INCLUDE: "../Neighbourhood.cs" src csharp -n

** HillClimbingMethod.cs

Реализует метод восхождения на холм в глубину.

#+INCLUDE: "../HillClimbingMethod.cs" src csharp -n

** Program.cs

#+INCLUDE: "../Program.cs" src csharp -n
